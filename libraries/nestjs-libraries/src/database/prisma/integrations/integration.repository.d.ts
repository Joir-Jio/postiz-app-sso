import { PrismaRepository } from '@gitroom/nestjs-libraries/database/prisma/prisma.service';
import { Integration } from '@prisma/client';
import { IntegrationTimeDto } from '@gitroom/nestjs-libraries/dtos/integrations/integration.time.dto';
import { PlugDto } from '@gitroom/nestjs-libraries/dtos/plugs/plug.dto';
export declare class IntegrationRepository {
    private _integration;
    private _posts;
    private _plugs;
    private _exisingPlugData;
    private _customers;
    private _mentions;
    private storage;
    constructor(_integration: PrismaRepository<'integration'>, _posts: PrismaRepository<'post'>, _plugs: PrismaRepository<'plugs'>, _exisingPlugData: PrismaRepository<'exisingPlugData'>, _customers: PrismaRepository<'customer'>, _mentions: PrismaRepository<'mentions'>);
    getMentions(platform: string, q: string): import(".prisma/client").Prisma.PrismaPromise<{
        name: string;
        username: string;
        image: string;
    }[]>;
    insertMentions(platform: string, mentions: {
        name: string;
        username: string;
        image: string;
    }[]): any[] | import(".prisma/client").Prisma.PrismaPromise<import(".prisma/client").Prisma.BatchPayload>;
    checkPreviousConnections(org: string, id: string): Promise<boolean>;
    updateProviderSettings(org: string, id: string, settings: string): import(".prisma/client").Prisma.Prisma__IntegrationClient<{
        id: string;
        name: string;
        createdAt: Date;
        updatedAt: Date | null;
        deletedAt: Date | null;
        picture: string | null;
        organizationId: string;
        type: string;
        internalId: string;
        providerIdentifier: string;
        token: string;
        disabled: boolean;
        tokenExpiration: Date | null;
        refreshToken: string | null;
        profile: string | null;
        inBetweenSteps: boolean;
        refreshNeeded: boolean;
        postingTimes: string;
        customInstanceDetails: string | null;
        customerId: string | null;
        rootInternalId: string | null;
        additionalSettings: string | null;
    }, never, import("@prisma/client/runtime/library").DefaultArgs, import(".prisma/client").Prisma.PrismaClientOptions>;
    setTimes(org: string, id: string, times: IntegrationTimeDto): Promise<{
        id: string;
    }>;
    getPlug(plugId: string): import(".prisma/client").Prisma.Prisma__PlugsClient<{
        integration: {
            id: string;
            name: string;
            createdAt: Date;
            updatedAt: Date | null;
            deletedAt: Date | null;
            picture: string | null;
            organizationId: string;
            type: string;
            internalId: string;
            providerIdentifier: string;
            token: string;
            disabled: boolean;
            tokenExpiration: Date | null;
            refreshToken: string | null;
            profile: string | null;
            inBetweenSteps: boolean;
            refreshNeeded: boolean;
            postingTimes: string;
            customInstanceDetails: string | null;
            customerId: string | null;
            rootInternalId: string | null;
            additionalSettings: string | null;
        };
    } & {
        id: string;
        data: string;
        activated: boolean;
        organizationId: string;
        plugFunction: string;
        integrationId: string;
    }, null, import("@prisma/client/runtime/library").DefaultArgs, import(".prisma/client").Prisma.PrismaClientOptions>;
    getPlugs(orgId: string, integrationId: string): Promise<({
        integration: {
            id: string;
            providerIdentifier: string;
        };
    } & {
        id: string;
        data: string;
        activated: boolean;
        organizationId: string;
        plugFunction: string;
        integrationId: string;
    })[]>;
    updateIntegration(id: string, params: Partial<Integration>): Promise<{
        id: string;
        name: string;
        createdAt: Date;
        updatedAt: Date | null;
        deletedAt: Date | null;
        picture: string | null;
        organizationId: string;
        type: string;
        internalId: string;
        providerIdentifier: string;
        token: string;
        disabled: boolean;
        tokenExpiration: Date | null;
        refreshToken: string | null;
        profile: string | null;
        inBetweenSteps: boolean;
        refreshNeeded: boolean;
        postingTimes: string;
        customInstanceDetails: string | null;
        customerId: string | null;
        rootInternalId: string | null;
        additionalSettings: string | null;
    }>;
    disconnectChannel(org: string, id: string): import(".prisma/client").Prisma.Prisma__IntegrationClient<{
        id: string;
        name: string;
        createdAt: Date;
        updatedAt: Date | null;
        deletedAt: Date | null;
        picture: string | null;
        organizationId: string;
        type: string;
        internalId: string;
        providerIdentifier: string;
        token: string;
        disabled: boolean;
        tokenExpiration: Date | null;
        refreshToken: string | null;
        profile: string | null;
        inBetweenSteps: boolean;
        refreshNeeded: boolean;
        postingTimes: string;
        customInstanceDetails: string | null;
        customerId: string | null;
        rootInternalId: string | null;
        additionalSettings: string | null;
    }, never, import("@prisma/client/runtime/library").DefaultArgs, import(".prisma/client").Prisma.PrismaClientOptions>;
    createOrUpdateIntegration(additionalSettings: {
        title: string;
        description: string;
        type: 'checkbox' | 'text' | 'textarea';
        value: any;
        regex?: string;
    }[] | undefined, oneTimeToken: boolean, org: string, name: string, picture: string | undefined, type: 'article' | 'social', internalId: string, provider: string, token: string, refreshToken?: string, expiresIn?: number, username?: string, isBetweenSteps?: boolean, refresh?: string, timezone?: number, customInstanceDetails?: string): Promise<{
        id: string;
        name: string;
        createdAt: Date;
        updatedAt: Date | null;
        deletedAt: Date | null;
        picture: string | null;
        organizationId: string;
        type: string;
        internalId: string;
        providerIdentifier: string;
        token: string;
        disabled: boolean;
        tokenExpiration: Date | null;
        refreshToken: string | null;
        profile: string | null;
        inBetweenSteps: boolean;
        refreshNeeded: boolean;
        postingTimes: string;
        customInstanceDetails: string | null;
        customerId: string | null;
        rootInternalId: string | null;
        additionalSettings: string | null;
    }>;
    needsToBeRefreshed(): import(".prisma/client").Prisma.PrismaPromise<{
        id: string;
        name: string;
        createdAt: Date;
        updatedAt: Date | null;
        deletedAt: Date | null;
        picture: string | null;
        organizationId: string;
        type: string;
        internalId: string;
        providerIdentifier: string;
        token: string;
        disabled: boolean;
        tokenExpiration: Date | null;
        refreshToken: string | null;
        profile: string | null;
        inBetweenSteps: boolean;
        refreshNeeded: boolean;
        postingTimes: string;
        customInstanceDetails: string | null;
        customerId: string | null;
        rootInternalId: string | null;
        additionalSettings: string | null;
    }[]>;
    refreshNeeded(org: string, id: string): import(".prisma/client").Prisma.Prisma__IntegrationClient<{
        id: string;
        name: string;
        createdAt: Date;
        updatedAt: Date | null;
        deletedAt: Date | null;
        picture: string | null;
        organizationId: string;
        type: string;
        internalId: string;
        providerIdentifier: string;
        token: string;
        disabled: boolean;
        tokenExpiration: Date | null;
        refreshToken: string | null;
        profile: string | null;
        inBetweenSteps: boolean;
        refreshNeeded: boolean;
        postingTimes: string;
        customInstanceDetails: string | null;
        customerId: string | null;
        rootInternalId: string | null;
        additionalSettings: string | null;
    }, never, import("@prisma/client/runtime/library").DefaultArgs, import(".prisma/client").Prisma.PrismaClientOptions>;
    updateNameAndUrl(id: string, name: string, url: string): import(".prisma/client").Prisma.Prisma__IntegrationClient<{
        id: string;
        name: string;
        createdAt: Date;
        updatedAt: Date | null;
        deletedAt: Date | null;
        picture: string | null;
        organizationId: string;
        type: string;
        internalId: string;
        providerIdentifier: string;
        token: string;
        disabled: boolean;
        tokenExpiration: Date | null;
        refreshToken: string | null;
        profile: string | null;
        inBetweenSteps: boolean;
        refreshNeeded: boolean;
        postingTimes: string;
        customInstanceDetails: string | null;
        customerId: string | null;
        rootInternalId: string | null;
        additionalSettings: string | null;
    }, never, import("@prisma/client/runtime/library").DefaultArgs, import(".prisma/client").Prisma.PrismaClientOptions>;
    getIntegrationById(org: string, id: string): import(".prisma/client").Prisma.Prisma__IntegrationClient<{
        id: string;
        name: string;
        createdAt: Date;
        updatedAt: Date | null;
        deletedAt: Date | null;
        picture: string | null;
        organizationId: string;
        type: string;
        internalId: string;
        providerIdentifier: string;
        token: string;
        disabled: boolean;
        tokenExpiration: Date | null;
        refreshToken: string | null;
        profile: string | null;
        inBetweenSteps: boolean;
        refreshNeeded: boolean;
        postingTimes: string;
        customInstanceDetails: string | null;
        customerId: string | null;
        rootInternalId: string | null;
        additionalSettings: string | null;
    }, null, import("@prisma/client/runtime/library").DefaultArgs, import(".prisma/client").Prisma.PrismaClientOptions>;
    getIntegrationForOrder(id: string, order: string, user: string, org: string): Promise<{
        id: string;
        name: string;
        picture: string;
        providerIdentifier: string;
        inBetweenSteps: boolean;
    }>;
    updateOnCustomerName(org: string, id: string, name: string): Promise<{
        id: string;
        name: string;
        createdAt: Date;
        updatedAt: Date | null;
        deletedAt: Date | null;
        picture: string | null;
        organizationId: string;
        type: string;
        internalId: string;
        providerIdentifier: string;
        token: string;
        disabled: boolean;
        tokenExpiration: Date | null;
        refreshToken: string | null;
        profile: string | null;
        inBetweenSteps: boolean;
        refreshNeeded: boolean;
        postingTimes: string;
        customInstanceDetails: string | null;
        customerId: string | null;
        rootInternalId: string | null;
        additionalSettings: string | null;
    }>;
    updateIntegrationGroup(org: string, id: string, group: string): import(".prisma/client").Prisma.Prisma__IntegrationClient<{
        id: string;
        name: string;
        createdAt: Date;
        updatedAt: Date | null;
        deletedAt: Date | null;
        picture: string | null;
        organizationId: string;
        type: string;
        internalId: string;
        providerIdentifier: string;
        token: string;
        disabled: boolean;
        tokenExpiration: Date | null;
        refreshToken: string | null;
        profile: string | null;
        inBetweenSteps: boolean;
        refreshNeeded: boolean;
        postingTimes: string;
        customInstanceDetails: string | null;
        customerId: string | null;
        rootInternalId: string | null;
        additionalSettings: string | null;
    }, never, import("@prisma/client/runtime/library").DefaultArgs, import(".prisma/client").Prisma.PrismaClientOptions>;
    customers(orgId: string): import(".prisma/client").Prisma.PrismaPromise<{
        id: string;
        name: string;
        createdAt: Date;
        updatedAt: Date;
        deletedAt: Date | null;
        orgId: string;
    }[]>;
    getIntegrationsList(org: string): import(".prisma/client").Prisma.PrismaPromise<({
        customer: {
            id: string;
            name: string;
            createdAt: Date;
            updatedAt: Date;
            deletedAt: Date | null;
            orgId: string;
        };
    } & {
        id: string;
        name: string;
        createdAt: Date;
        updatedAt: Date | null;
        deletedAt: Date | null;
        picture: string | null;
        organizationId: string;
        type: string;
        internalId: string;
        providerIdentifier: string;
        token: string;
        disabled: boolean;
        tokenExpiration: Date | null;
        refreshToken: string | null;
        profile: string | null;
        inBetweenSteps: boolean;
        refreshNeeded: boolean;
        postingTimes: string;
        customInstanceDetails: string | null;
        customerId: string | null;
        rootInternalId: string | null;
        additionalSettings: string | null;
    })[]>;
    disableChannel(org: string, id: string): Promise<void>;
    enableChannel(org: string, id: string): Promise<void>;
    getPostsForChannel(org: string, id: string): import(".prisma/client").Prisma.GetPostGroupByPayload<{
        by: "group"[];
        where: {
            organizationId: string;
            integrationId: string;
            deletedAt: null;
        };
    }>;
    deleteChannel(org: string, id: string): import(".prisma/client").Prisma.Prisma__IntegrationClient<{
        id: string;
        name: string;
        createdAt: Date;
        updatedAt: Date | null;
        deletedAt: Date | null;
        picture: string | null;
        organizationId: string;
        type: string;
        internalId: string;
        providerIdentifier: string;
        token: string;
        disabled: boolean;
        tokenExpiration: Date | null;
        refreshToken: string | null;
        profile: string | null;
        inBetweenSteps: boolean;
        refreshNeeded: boolean;
        postingTimes: string;
        customInstanceDetails: string | null;
        customerId: string | null;
        rootInternalId: string | null;
        additionalSettings: string | null;
    }, never, import("@prisma/client/runtime/library").DefaultArgs, import(".prisma/client").Prisma.PrismaClientOptions>;
    checkForDeletedOnceAndUpdate(org: string, page: string): Promise<import(".prisma/client").Prisma.BatchPayload>;
    disableIntegrations(org: string, totalChannels: number): Promise<void>;
    getPlugsByIntegrationId(org: string, id: string): import(".prisma/client").Prisma.PrismaPromise<{
        id: string;
        data: string;
        activated: boolean;
        organizationId: string;
        plugFunction: string;
        integrationId: string;
    }[]>;
    createOrUpdatePlug(org: string, integrationId: string, body: PlugDto): import(".prisma/client").Prisma.Prisma__PlugsClient<{
        activated: boolean;
    }, never, import("@prisma/client/runtime/library").DefaultArgs, import(".prisma/client").Prisma.PrismaClientOptions>;
    changePlugActivation(orgId: string, plugId: string, status: boolean): import(".prisma/client").Prisma.Prisma__PlugsClient<{
        id: string;
        data: string;
        activated: boolean;
        organizationId: string;
        plugFunction: string;
        integrationId: string;
    }, never, import("@prisma/client/runtime/library").DefaultArgs, import(".prisma/client").Prisma.PrismaClientOptions>;
    loadExisingData(methodName: string, integrationId: string, id: string[]): Promise<{
        id: string;
        value: string;
        integrationId: string;
        methodName: string;
    }[]>;
    saveExisingData(methodName: string, integrationId: string, value: string[]): Promise<import(".prisma/client").Prisma.BatchPayload>;
    getPostingTimes(orgId: string, integrationsId?: string): Promise<{
        postingTimes: string;
    }[]>;
}
