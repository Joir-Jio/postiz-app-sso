import { IntegrationRepository } from '@gitroom/nestjs-libraries/database/prisma/integrations/integration.repository';
import { IntegrationManager } from '@gitroom/nestjs-libraries/integrations/integration.manager';
import { AnalyticsData, SocialProvider } from '@gitroom/nestjs-libraries/integrations/social/social.integrations.interface';
import { Integration, Organization } from '@prisma/client';
import { NotificationService } from '@gitroom/nestjs-libraries/database/prisma/notifications/notification.service';
import { IntegrationTimeDto } from '@gitroom/nestjs-libraries/dtos/integrations/integration.time.dto';
import { PlugDto } from '@gitroom/nestjs-libraries/dtos/plugs/plug.dto';
import { BullMqClient } from '@gitroom/nestjs-libraries/bull-mq-transport-new/client';
import { AutopostRepository } from '@gitroom/nestjs-libraries/database/prisma/autopost/autopost.repository';
export declare class IntegrationService {
    private _integrationRepository;
    private _autopostsRepository;
    private _integrationManager;
    private _notificationService;
    private _workerServiceProducer;
    private storage;
    constructor(_integrationRepository: IntegrationRepository, _autopostsRepository: AutopostRepository, _integrationManager: IntegrationManager, _notificationService: NotificationService, _workerServiceProducer: BullMqClient);
    changeActiveCron(orgId: string): Promise<boolean>;
    getMentions(platform: string, q: string): import(".prisma/client").Prisma.PrismaPromise<{
        name: string;
        username: string;
        image: string;
    }[]>;
    insertMentions(platform: string, mentions: {
        name: string;
        username: string;
        image: string;
    }[]): any[] | import(".prisma/client").Prisma.PrismaPromise<import(".prisma/client").Prisma.BatchPayload>;
    setTimes(orgId: string, integrationId: string, times: IntegrationTimeDto): Promise<{
        id: string;
    }>;
    updateProviderSettings(org: string, id: string, additionalSettings: string): import(".prisma/client").Prisma.Prisma__IntegrationClient<{
        id: string;
        name: string;
        createdAt: Date;
        updatedAt: Date | null;
        deletedAt: Date | null;
        picture: string | null;
        organizationId: string;
        type: string;
        internalId: string;
        providerIdentifier: string;
        token: string;
        disabled: boolean;
        tokenExpiration: Date | null;
        refreshToken: string | null;
        profile: string | null;
        inBetweenSteps: boolean;
        refreshNeeded: boolean;
        postingTimes: string;
        customInstanceDetails: string | null;
        customerId: string | null;
        rootInternalId: string | null;
        additionalSettings: string | null;
    }, never, import("@prisma/client/runtime/library").DefaultArgs, import(".prisma/client").Prisma.PrismaClientOptions>;
    checkPreviousConnections(org: string, id: string): Promise<boolean>;
    createOrUpdateIntegration(additionalSettings: {
        title: string;
        description: string;
        type: 'checkbox' | 'text' | 'textarea';
        value: any;
        regex?: string;
    }[] | undefined, oneTimeToken: boolean, org: string, name: string, picture: string | undefined, type: 'article' | 'social', internalId: string, provider: string, token: string, refreshToken?: string, expiresIn?: number, username?: string, isBetweenSteps?: boolean, refresh?: string, timezone?: number, customInstanceDetails?: string): Promise<{
        id: string;
        name: string;
        createdAt: Date;
        updatedAt: Date | null;
        deletedAt: Date | null;
        picture: string | null;
        organizationId: string;
        type: string;
        internalId: string;
        providerIdentifier: string;
        token: string;
        disabled: boolean;
        tokenExpiration: Date | null;
        refreshToken: string | null;
        profile: string | null;
        inBetweenSteps: boolean;
        refreshNeeded: boolean;
        postingTimes: string;
        customInstanceDetails: string | null;
        customerId: string | null;
        rootInternalId: string | null;
        additionalSettings: string | null;
    }>;
    updateIntegrationGroup(org: string, id: string, group: string): import(".prisma/client").Prisma.Prisma__IntegrationClient<{
        id: string;
        name: string;
        createdAt: Date;
        updatedAt: Date | null;
        deletedAt: Date | null;
        picture: string | null;
        organizationId: string;
        type: string;
        internalId: string;
        providerIdentifier: string;
        token: string;
        disabled: boolean;
        tokenExpiration: Date | null;
        refreshToken: string | null;
        profile: string | null;
        inBetweenSteps: boolean;
        refreshNeeded: boolean;
        postingTimes: string;
        customInstanceDetails: string | null;
        customerId: string | null;
        rootInternalId: string | null;
        additionalSettings: string | null;
    }, never, import("@prisma/client/runtime/library").DefaultArgs, import(".prisma/client").Prisma.PrismaClientOptions>;
    updateOnCustomerName(org: string, id: string, name: string): Promise<{
        id: string;
        name: string;
        createdAt: Date;
        updatedAt: Date | null;
        deletedAt: Date | null;
        picture: string | null;
        organizationId: string;
        type: string;
        internalId: string;
        providerIdentifier: string;
        token: string;
        disabled: boolean;
        tokenExpiration: Date | null;
        refreshToken: string | null;
        profile: string | null;
        inBetweenSteps: boolean;
        refreshNeeded: boolean;
        postingTimes: string;
        customInstanceDetails: string | null;
        customerId: string | null;
        rootInternalId: string | null;
        additionalSettings: string | null;
    }>;
    getIntegrationsList(org: string): import(".prisma/client").Prisma.PrismaPromise<({
        customer: {
            id: string;
            name: string;
            createdAt: Date;
            updatedAt: Date;
            deletedAt: Date | null;
            orgId: string;
        };
    } & {
        id: string;
        name: string;
        createdAt: Date;
        updatedAt: Date | null;
        deletedAt: Date | null;
        picture: string | null;
        organizationId: string;
        type: string;
        internalId: string;
        providerIdentifier: string;
        token: string;
        disabled: boolean;
        tokenExpiration: Date | null;
        refreshToken: string | null;
        profile: string | null;
        inBetweenSteps: boolean;
        refreshNeeded: boolean;
        postingTimes: string;
        customInstanceDetails: string | null;
        customerId: string | null;
        rootInternalId: string | null;
        additionalSettings: string | null;
    })[]>;
    getIntegrationForOrder(id: string, order: string, user: string, org: string): Promise<{
        id: string;
        name: string;
        picture: string;
        providerIdentifier: string;
        inBetweenSteps: boolean;
    }>;
    updateNameAndUrl(id: string, name: string, url: string): import(".prisma/client").Prisma.Prisma__IntegrationClient<{
        id: string;
        name: string;
        createdAt: Date;
        updatedAt: Date | null;
        deletedAt: Date | null;
        picture: string | null;
        organizationId: string;
        type: string;
        internalId: string;
        providerIdentifier: string;
        token: string;
        disabled: boolean;
        tokenExpiration: Date | null;
        refreshToken: string | null;
        profile: string | null;
        inBetweenSteps: boolean;
        refreshNeeded: boolean;
        postingTimes: string;
        customInstanceDetails: string | null;
        customerId: string | null;
        rootInternalId: string | null;
        additionalSettings: string | null;
    }, never, import("@prisma/client/runtime/library").DefaultArgs, import(".prisma/client").Prisma.PrismaClientOptions>;
    getIntegrationById(org: string, id: string): import(".prisma/client").Prisma.Prisma__IntegrationClient<{
        id: string;
        name: string;
        createdAt: Date;
        updatedAt: Date | null;
        deletedAt: Date | null;
        picture: string | null;
        organizationId: string;
        type: string;
        internalId: string;
        providerIdentifier: string;
        token: string;
        disabled: boolean;
        tokenExpiration: Date | null;
        refreshToken: string | null;
        profile: string | null;
        inBetweenSteps: boolean;
        refreshNeeded: boolean;
        postingTimes: string;
        customInstanceDetails: string | null;
        customerId: string | null;
        rootInternalId: string | null;
        additionalSettings: string | null;
    }, null, import("@prisma/client/runtime/library").DefaultArgs, import(".prisma/client").Prisma.PrismaClientOptions>;
    refreshToken(provider: SocialProvider, refresh: string): Promise<false | {
        refreshToken: string;
        accessToken: string;
        expiresIn: number;
    }>;
    disconnectChannel(orgId: string, integration: Integration): Promise<void>;
    informAboutRefreshError(orgId: string, integration: Integration, err?: string): Promise<void>;
    refreshNeeded(org: string, id: string): Promise<{
        id: string;
        name: string;
        createdAt: Date;
        updatedAt: Date | null;
        deletedAt: Date | null;
        picture: string | null;
        organizationId: string;
        type: string;
        internalId: string;
        providerIdentifier: string;
        token: string;
        disabled: boolean;
        tokenExpiration: Date | null;
        refreshToken: string | null;
        profile: string | null;
        inBetweenSteps: boolean;
        refreshNeeded: boolean;
        postingTimes: string;
        customInstanceDetails: string | null;
        customerId: string | null;
        rootInternalId: string | null;
        additionalSettings: string | null;
    }>;
    refreshTokens(): Promise<void>;
    disableChannel(org: string, id: string): Promise<void>;
    enableChannel(org: string, totalChannels: number, id: string): Promise<void>;
    getPostsForChannel(org: string, id: string): Promise<(import(".prisma/client").Prisma.PickEnumerable<import(".prisma/client").Prisma.PostGroupByOutputType, "group"[]> & {})[]>;
    deleteChannel(org: string, id: string): Promise<{
        id: string;
        name: string;
        createdAt: Date;
        updatedAt: Date | null;
        deletedAt: Date | null;
        picture: string | null;
        organizationId: string;
        type: string;
        internalId: string;
        providerIdentifier: string;
        token: string;
        disabled: boolean;
        tokenExpiration: Date | null;
        refreshToken: string | null;
        profile: string | null;
        inBetweenSteps: boolean;
        refreshNeeded: boolean;
        postingTimes: string;
        customInstanceDetails: string | null;
        customerId: string | null;
        rootInternalId: string | null;
        additionalSettings: string | null;
    }>;
    disableIntegrations(org: string, totalChannels: number): Promise<void>;
    checkForDeletedOnceAndUpdate(org: string, page: string): Promise<import(".prisma/client").Prisma.BatchPayload>;
    saveInstagram(org: string, id: string, data: {
        pageId: string;
        id: string;
    }): Promise<{
        success: boolean;
    }>;
    saveLinkedin(org: string, id: string, page: string): Promise<{
        success: boolean;
    }>;
    saveFacebook(org: string, id: string, page: string): Promise<{
        success: boolean;
    }>;
    checkAnalytics(org: Organization, integration: string, date: string, forceRefresh?: boolean): Promise<AnalyticsData[]>;
    customers(orgId: string): import(".prisma/client").Prisma.PrismaPromise<{
        id: string;
        name: string;
        createdAt: Date;
        updatedAt: Date;
        deletedAt: Date | null;
        orgId: string;
    }[]>;
    getPlugsByIntegrationId(org: string, integrationId: string): import(".prisma/client").Prisma.PrismaPromise<{
        id: string;
        data: string;
        activated: boolean;
        organizationId: string;
        plugFunction: string;
        integrationId: string;
    }[]>;
    processInternalPlug(data: {
        post: string;
        originalIntegration: string;
        integration: string;
        plugName: string;
        orgId: string;
        delay: number;
        information: any;
    }, forceRefresh?: boolean): Promise<any>;
    processPlugs(data: {
        plugId: string;
        postId: string;
        delay: number;
        totalRuns: number;
        currentRun: number;
    }): Promise<void>;
    createOrUpdatePlug(orgId: string, integrationId: string, body: PlugDto): Promise<{
        activated: boolean;
    }>;
    changePlugActivation(orgId: string, plugId: string, status: boolean): Promise<{
        id: string;
    }>;
    getPlugs(orgId: string, integrationId: string): Promise<({
        integration: {
            id: string;
            providerIdentifier: string;
        };
    } & {
        id: string;
        data: string;
        activated: boolean;
        organizationId: string;
        plugFunction: string;
        integrationId: string;
    })[]>;
    loadExisingData(methodName: string, integrationId: string, id: string[]): Promise<string[]>;
    findFreeDateTime(orgId: string, integrationsId?: string): Promise<number[]>;
}
