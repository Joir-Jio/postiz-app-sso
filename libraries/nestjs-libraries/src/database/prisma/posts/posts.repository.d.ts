import { PrismaRepository } from '@gitroom/nestjs-libraries/database/prisma/prisma.service';
import { Post as PostBody } from '@gitroom/nestjs-libraries/dtos/posts/create.post.dto';
import { State } from '@prisma/client';
import { GetPostsDto } from '@gitroom/nestjs-libraries/dtos/posts/get.posts.dto';
import dayjs from 'dayjs';
import { CreateTagDto } from '@gitroom/nestjs-libraries/dtos/posts/create.tag.dto';
export declare class PostsRepository {
    private _post;
    private _popularPosts;
    private _comments;
    private _tags;
    private _tagsPosts;
    private _errors;
    constructor(_post: PrismaRepository<'post'>, _popularPosts: PrismaRepository<'popularPosts'>, _comments: PrismaRepository<'comments'>, _tags: PrismaRepository<'tags'>, _tagsPosts: PrismaRepository<'tagsPosts'>, _errors: PrismaRepository<'errors'>);
    checkPending15minutesBack(): import(".prisma/client").Prisma.PrismaPromise<{
        id: string;
        publishDate: Date;
    }[]>;
    searchForMissingThreeHoursPosts(): import(".prisma/client").Prisma.PrismaPromise<{
        id: string;
        publishDate: Date;
    }[]>;
    getOldPosts(orgId: string, date: string): import(".prisma/client").Prisma.PrismaPromise<{
        integration: {
            id: string;
            name: string;
            picture: string;
            type: string;
            providerIdentifier: string;
        };
        id: string;
        content: string;
        state: import(".prisma/client").$Enums.State;
        publishDate: Date;
        releaseURL: string;
    }[]>;
    updateImages(id: string, images: string): import(".prisma/client").Prisma.Prisma__PostClient<{
        error: string | null;
        id: string;
        description: string | null;
        createdAt: Date;
        updatedAt: Date;
        deletedAt: Date | null;
        organizationId: string;
        content: string;
        state: import(".prisma/client").$Enums.State;
        image: string | null;
        integrationId: string;
        publishDate: Date;
        group: string;
        title: string | null;
        parentPostId: string | null;
        releaseId: string | null;
        releaseURL: string | null;
        settings: string | null;
        submittedForOrderId: string | null;
        submittedForOrganizationId: string | null;
        approvedSubmitForOrder: import(".prisma/client").$Enums.APPROVED_SUBMIT_FOR_ORDER;
        lastMessageId: string | null;
        intervalInDays: number | null;
    }, never, import("@prisma/client/runtime/library").DefaultArgs, import(".prisma/client").Prisma.PrismaClientOptions>;
    getPostUrls(orgId: string, ids: string[]): import(".prisma/client").Prisma.PrismaPromise<{
        id: string;
        releaseURL: string;
    }[]>;
    getPosts(orgId: string, query: GetPostsDto): Promise<any[]>;
    deletePost(orgId: string, group: string): Promise<{
        id: string;
    }>;
    getPost(id: string, includeIntegration?: boolean, orgId?: string, isFirst?: boolean): import(".prisma/client").Prisma.Prisma__PostClient<{
        tags: {
            tag: {
                id: string;
                name: string;
                createdAt: Date;
                updatedAt: Date;
                deletedAt: Date | null;
                orgId: string;
                color: string;
            };
        }[];
        integration: {
            id: string;
            name: string;
            createdAt: Date;
            updatedAt: Date | null;
            deletedAt: Date | null;
            picture: string | null;
            organizationId: string;
            type: string;
            internalId: string;
            providerIdentifier: string;
            token: string;
            disabled: boolean;
            tokenExpiration: Date | null;
            refreshToken: string | null;
            profile: string | null;
            inBetweenSteps: boolean;
            refreshNeeded: boolean;
            postingTimes: string;
            customInstanceDetails: string | null;
            customerId: string | null;
            rootInternalId: string | null;
            additionalSettings: string | null;
        };
        childrenPost: {
            error: string | null;
            id: string;
            description: string | null;
            createdAt: Date;
            updatedAt: Date;
            deletedAt: Date | null;
            organizationId: string;
            content: string;
            state: import(".prisma/client").$Enums.State;
            image: string | null;
            integrationId: string;
            publishDate: Date;
            group: string;
            title: string | null;
            parentPostId: string | null;
            releaseId: string | null;
            releaseURL: string | null;
            settings: string | null;
            submittedForOrderId: string | null;
            submittedForOrganizationId: string | null;
            approvedSubmitForOrder: import(".prisma/client").$Enums.APPROVED_SUBMIT_FOR_ORDER;
            lastMessageId: string | null;
            intervalInDays: number | null;
        }[];
    } & {
        error: string | null;
        id: string;
        description: string | null;
        createdAt: Date;
        updatedAt: Date;
        deletedAt: Date | null;
        organizationId: string;
        content: string;
        state: import(".prisma/client").$Enums.State;
        image: string | null;
        integrationId: string;
        publishDate: Date;
        group: string;
        title: string | null;
        parentPostId: string | null;
        releaseId: string | null;
        releaseURL: string | null;
        settings: string | null;
        submittedForOrderId: string | null;
        submittedForOrganizationId: string | null;
        approvedSubmitForOrder: import(".prisma/client").$Enums.APPROVED_SUBMIT_FOR_ORDER;
        lastMessageId: string | null;
        intervalInDays: number | null;
    }, null, import("@prisma/client/runtime/library").DefaultArgs, import(".prisma/client").Prisma.PrismaClientOptions>;
    updatePost(id: string, postId: string, releaseURL: string): import(".prisma/client").Prisma.Prisma__PostClient<{
        error: string | null;
        id: string;
        description: string | null;
        createdAt: Date;
        updatedAt: Date;
        deletedAt: Date | null;
        organizationId: string;
        content: string;
        state: import(".prisma/client").$Enums.State;
        image: string | null;
        integrationId: string;
        publishDate: Date;
        group: string;
        title: string | null;
        parentPostId: string | null;
        releaseId: string | null;
        releaseURL: string | null;
        settings: string | null;
        submittedForOrderId: string | null;
        submittedForOrganizationId: string | null;
        approvedSubmitForOrder: import(".prisma/client").$Enums.APPROVED_SUBMIT_FOR_ORDER;
        lastMessageId: string | null;
        intervalInDays: number | null;
    }, never, import("@prisma/client/runtime/library").DefaultArgs, import(".prisma/client").Prisma.PrismaClientOptions>;
    changeState(id: string, state: State, err?: any, body?: any): Promise<{
        integration: {
            providerIdentifier: string;
        };
    } & {
        error: string | null;
        id: string;
        description: string | null;
        createdAt: Date;
        updatedAt: Date;
        deletedAt: Date | null;
        organizationId: string;
        content: string;
        state: import(".prisma/client").$Enums.State;
        image: string | null;
        integrationId: string;
        publishDate: Date;
        group: string;
        title: string | null;
        parentPostId: string | null;
        releaseId: string | null;
        releaseURL: string | null;
        settings: string | null;
        submittedForOrderId: string | null;
        submittedForOrganizationId: string | null;
        approvedSubmitForOrder: import(".prisma/client").$Enums.APPROVED_SUBMIT_FOR_ORDER;
        lastMessageId: string | null;
        intervalInDays: number | null;
    }>;
    changeDate(orgId: string, id: string, date: string): Promise<{
        error: string | null;
        id: string;
        description: string | null;
        createdAt: Date;
        updatedAt: Date;
        deletedAt: Date | null;
        organizationId: string;
        content: string;
        state: import(".prisma/client").$Enums.State;
        image: string | null;
        integrationId: string;
        publishDate: Date;
        group: string;
        title: string | null;
        parentPostId: string | null;
        releaseId: string | null;
        releaseURL: string | null;
        settings: string | null;
        submittedForOrderId: string | null;
        submittedForOrganizationId: string | null;
        approvedSubmitForOrder: import(".prisma/client").$Enums.APPROVED_SUBMIT_FOR_ORDER;
        lastMessageId: string | null;
        intervalInDays: number | null;
    }>;
    countPostsFromDay(orgId: string, date: Date): import(".prisma/client").Prisma.PrismaPromise<number>;
    createOrUpdatePost(state: 'draft' | 'schedule' | 'now', orgId: string, date: string, body: PostBody, tags: {
        value: string;
        label: string;
    }[], inter?: number): Promise<{
        previousPost: string;
        posts: {
            error: string | null;
            id: string;
            description: string | null;
            createdAt: Date;
            updatedAt: Date;
            deletedAt: Date | null;
            organizationId: string;
            content: string;
            state: import(".prisma/client").$Enums.State;
            image: string | null;
            integrationId: string;
            publishDate: Date;
            group: string;
            title: string | null;
            parentPostId: string | null;
            releaseId: string | null;
            releaseURL: string | null;
            settings: string | null;
            submittedForOrderId: string | null;
            submittedForOrganizationId: string | null;
            approvedSubmitForOrder: import(".prisma/client").$Enums.APPROVED_SUBMIT_FOR_ORDER;
            lastMessageId: string | null;
            intervalInDays: number | null;
        }[];
    }>;
    submit(id: string, order: string, buyerOrganizationId: string): Promise<{
        id: string;
        description: string;
        submittedForOrder: {
            messageGroupId: string;
        };
    }>;
    updateMessage(id: string, messageId: string): import(".prisma/client").Prisma.Prisma__PostClient<{
        error: string | null;
        id: string;
        description: string | null;
        createdAt: Date;
        updatedAt: Date;
        deletedAt: Date | null;
        organizationId: string;
        content: string;
        state: import(".prisma/client").$Enums.State;
        image: string | null;
        integrationId: string;
        publishDate: Date;
        group: string;
        title: string | null;
        parentPostId: string | null;
        releaseId: string | null;
        releaseURL: string | null;
        settings: string | null;
        submittedForOrderId: string | null;
        submittedForOrganizationId: string | null;
        approvedSubmitForOrder: import(".prisma/client").$Enums.APPROVED_SUBMIT_FOR_ORDER;
        lastMessageId: string | null;
        intervalInDays: number | null;
    }, never, import("@prisma/client/runtime/library").DefaultArgs, import(".prisma/client").Prisma.PrismaClientOptions>;
    getPostById(id: string, org?: string): import(".prisma/client").Prisma.Prisma__PostClient<{
        integration: {
            id: string;
            name: string;
            createdAt: Date;
            updatedAt: Date | null;
            deletedAt: Date | null;
            picture: string | null;
            organizationId: string;
            type: string;
            internalId: string;
            providerIdentifier: string;
            token: string;
            disabled: boolean;
            tokenExpiration: Date | null;
            refreshToken: string | null;
            profile: string | null;
            inBetweenSteps: boolean;
            refreshNeeded: boolean;
            postingTimes: string;
            customInstanceDetails: string | null;
            customerId: string | null;
            rootInternalId: string | null;
            additionalSettings: string | null;
        };
        submittedForOrder: {
            posts: {
                error: string | null;
                id: string;
                description: string | null;
                createdAt: Date;
                updatedAt: Date;
                deletedAt: Date | null;
                organizationId: string;
                content: string;
                state: import(".prisma/client").$Enums.State;
                image: string | null;
                integrationId: string;
                publishDate: Date;
                group: string;
                title: string | null;
                parentPostId: string | null;
                releaseId: string | null;
                releaseURL: string | null;
                settings: string | null;
                submittedForOrderId: string | null;
                submittedForOrganizationId: string | null;
                approvedSubmitForOrder: import(".prisma/client").$Enums.APPROVED_SUBMIT_FOR_ORDER;
                lastMessageId: string | null;
                intervalInDays: number | null;
            }[];
            seller: {
                id: string;
                account: string;
            };
            ordersItems: {
                id: string;
                integrationId: string;
                price: number;
                quantity: number;
                orderId: string;
            }[];
        } & {
            id: string;
            createdAt: Date;
            updatedAt: Date;
            buyerId: string;
            sellerId: string;
            status: import(".prisma/client").$Enums.OrderStatus;
            messageGroupId: string;
            captureId: string | null;
        };
    } & {
        error: string | null;
        id: string;
        description: string | null;
        createdAt: Date;
        updatedAt: Date;
        deletedAt: Date | null;
        organizationId: string;
        content: string;
        state: import(".prisma/client").$Enums.State;
        image: string | null;
        integrationId: string;
        publishDate: Date;
        group: string;
        title: string | null;
        parentPostId: string | null;
        releaseId: string | null;
        releaseURL: string | null;
        settings: string | null;
        submittedForOrderId: string | null;
        submittedForOrganizationId: string | null;
        approvedSubmitForOrder: import(".prisma/client").$Enums.APPROVED_SUBMIT_FOR_ORDER;
        lastMessageId: string | null;
        intervalInDays: number | null;
    }, null, import("@prisma/client/runtime/library").DefaultArgs, import(".prisma/client").Prisma.PrismaClientOptions>;
    findAllExistingCategories(): import(".prisma/client").Prisma.PrismaPromise<{
        category: string;
    }[]>;
    findAllExistingTopicsOfCategory(category: string): import(".prisma/client").Prisma.PrismaPromise<{
        topic: string;
    }[]>;
    findPopularPosts(category: string, topic?: string): import(".prisma/client").Prisma.PrismaPromise<{
        content: string;
        hook: string;
    }[]>;
    createPopularPosts(post: {
        category: string;
        topic: string;
        content: string;
        hook: string;
    }): import(".prisma/client").Prisma.Prisma__PopularPostsClient<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        content: string;
        category: string;
        topic: string;
        hook: string;
    }, never, import("@prisma/client/runtime/library").DefaultArgs, import(".prisma/client").Prisma.PrismaClientOptions>;
    getPostsCountsByDates(orgId: string, times: number[], date: dayjs.Dayjs): Promise<number[]>;
    getComments(postId: string): Promise<{
        id: string;
        userId: string;
        createdAt: Date;
        updatedAt: Date;
        deletedAt: Date | null;
        organizationId: string;
        content: string;
        postId: string;
    }[]>;
    getTags(orgId: string): Promise<{
        id: string;
        name: string;
        createdAt: Date;
        updatedAt: Date;
        deletedAt: Date | null;
        orgId: string;
        color: string;
    }[]>;
    createTag(orgId: string, body: CreateTagDto): import(".prisma/client").Prisma.Prisma__TagsClient<{
        id: string;
        name: string;
        createdAt: Date;
        updatedAt: Date;
        deletedAt: Date | null;
        orgId: string;
        color: string;
    }, never, import("@prisma/client/runtime/library").DefaultArgs, import(".prisma/client").Prisma.PrismaClientOptions>;
    editTag(id: string, orgId: string, body: CreateTagDto): import(".prisma/client").Prisma.Prisma__TagsClient<{
        id: string;
        name: string;
        createdAt: Date;
        updatedAt: Date;
        deletedAt: Date | null;
        orgId: string;
        color: string;
    }, never, import("@prisma/client/runtime/library").DefaultArgs, import(".prisma/client").Prisma.PrismaClientOptions>;
    createComment(orgId: string, userId: string, postId: string, content: string): import(".prisma/client").Prisma.Prisma__CommentsClient<{
        id: string;
        userId: string;
        createdAt: Date;
        updatedAt: Date;
        deletedAt: Date | null;
        organizationId: string;
        content: string;
        postId: string;
    }, never, import("@prisma/client/runtime/library").DefaultArgs, import(".prisma/client").Prisma.PrismaClientOptions>;
    getPostsSince(orgId: string, since: string): Promise<{
        integration: {
            id: string;
            name: string;
            picture: string;
            type: string;
            providerIdentifier: string;
        };
        id: string;
        content: string;
        state: import(".prisma/client").$Enums.State;
        publishDate: Date;
        releaseURL: string;
    }[]>;
}
